<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[A tech blog by Seth Davis.]]></description><link>https://www.techwithseth.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 19 Oct 2020 02:15:23 GMT</lastBuildDate><item><title><![CDATA[6 Ways to Compose your React Components]]></title><description><![CDATA[Intro I'm very passionate about composition. Its a core principle of React and if leveraged properly, it can make building applications much…]]></description><link>https://www.techwithseth.com/6-ways-to-compose-your-react-components/</link><guid isPermaLink="false">https://www.techwithseth.com/6-ways-to-compose-your-react-components/</guid><pubDate>Sun, 02 Aug 2020 12:00:00 GMT</pubDate><content:encoded>&lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; - Compose your React components together for greater flexibility and reusability.&lt;/div&gt;&lt;/article&gt;&lt;h2&gt;Intro&lt;/h2&gt;&lt;p&gt;I’m very passionate about composition. Its a core principle of React and if leveraged properly, it can make building applications much easier. I hope after reading this article you will gain an awareness of the different ways to compose your components. Let’s take a look.&lt;/p&gt;&lt;h3&gt;A common approach&lt;/h3&gt;&lt;p&gt;I call it the “tunnel” approach. Let’s say you want to have an &lt;code class=&quot;language-text&quot;&gt;Earth&lt;/code&gt; component. Each layer of the &lt;code class=&quot;language-text&quot;&gt;Earth&lt;/code&gt; is a component. One might create an &lt;code class=&quot;language-text&quot;&gt;Earth&lt;/code&gt; component, embed a &lt;code class=&quot;language-text&quot;&gt;Crust&lt;/code&gt; component inside that component. Inside the &lt;code class=&quot;language-text&quot;&gt;Crust&lt;/code&gt; component, embed a &lt;code class=&quot;language-text&quot;&gt;Mantle&lt;/code&gt; component so on and so forth. This comes with a few drawbacks.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;None&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Abstracts/hides components&lt;/li&gt;&lt;li&gt;Jumping from component to component can be taxing&lt;/li&gt;&lt;li&gt;Prop passing can become inflated&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;Prop drilling example&lt;/h3&gt;&lt;p&gt;If you find yourself passing props in this fashion, try to leverage composition and/or break your components down into smaller ones in order to limit prop passing.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;h2&gt;Types of composition&lt;/h2&gt;&lt;p&gt;Instead of tunneling there are a variety of ways we can compose components together.&lt;/p&gt;&lt;h3&gt;1. Children prop (&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;Using the children prop is React’s foundational way of composition. The children prop can and should be combined with other forms of composition (i.e. Specialization). Use the children prop to pass child elements directly into the output of the parent.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The children prop is a foundational technique to compose components - always use the children props when you can.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Declarative&lt;ul&gt;&lt;li&gt;Make your code more predictable and easier to debug&lt;/li&gt;&lt;li&gt;Wins over the “tunnel” method (above) due to visual representation of how components are composed.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Flexible&lt;ul&gt;&lt;li&gt;Components can easily be reordered&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;None&lt;/li&gt;&lt;/ul&gt;&lt;article class=&quot;message undefined&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;In the example below, we solve the prop drilling issue by leveraging composition and passing the function directly to the component instead of passing it through multiple components.&lt;/div&gt;&lt;/article&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;2. Specialization (&lt;a href=&quot;https://reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;A specialized component is one that composes several small components together to form a larger, more complete component. Note how the &lt;code class=&quot;language-text&quot;&gt;Earth&lt;/code&gt; component contains all of the additional layers within it while the inner layers are still nested within each other like the example above. Here we’re combining the two styles of composition.&lt;/p&gt;&lt;p&gt;For the &lt;a href=&quot;https://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Atomic Design&lt;/a&gt; fans out there, a “specialized” component would be your “molecules” and/or “organisms”.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This method of composition is very common and should be used regularly along with the &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt; prop.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Portable/Reusable&lt;ul&gt;&lt;li&gt;Everything you need is contained in one component&lt;/li&gt;&lt;li&gt;No need to repeat yourself&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Pairs well with the children prop&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Less flexible&lt;ul&gt;&lt;li&gt;May contain unwanted components&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;3. Prop-defined composition (&lt;a href=&quot;https://reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;Using a prop, you can define where you want your sub components to live.&lt;/p&gt;&lt;p&gt;In the example below, the &lt;code class=&quot;language-text&quot;&gt;SolarSystem&lt;/code&gt; component has a left and right prop defining where the passed in components will be composed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This method is helpful when you’re wanting to constrict where elements can be placed. Helpful for layout-based components - should be used with discretion.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Declarative&lt;ul&gt;&lt;li&gt;Make your code more predictable&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Useful for layout components&lt;/li&gt;&lt;li&gt;Can be combined with children prop and specialization&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Less flexible&lt;ul&gt;&lt;li&gt;Props or “slots” restrict where components live&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Too many props can make the component API confusing&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;4. Higher order components (&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;A more advanced technique used to share behavior between components.&lt;/p&gt;&lt;p&gt;In this example we’ve given &lt;code class=&quot;language-text&quot;&gt;Earth&lt;/code&gt; the ability to track the mouse cursor while hovering over the component.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;While this was a very popular way to share behaviors between components, in my opinion, it is no longer the method of choice. Use with caution as it can easily be overused.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Easily enhance/share functionality with other component&lt;/li&gt;&lt;li&gt;Pairs well with specialized components&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Passed props are implicit dependencies&lt;ul&gt;&lt;li&gt;It can get confusing to understand where props are coming from vs directly importing the behavior you depend on in the components that use it.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using lots of HOCs with lots of props can cause prop collisions (&lt;a href=&quot;https://medium.com/javascript-scene/do-react-hooks-replace-higher-order-components-hocs-7ae4a08b7b58&quot;&gt;Source&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;5. Render props (&lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;This technique is very similar to a higher order component in that it too shares behavior.&lt;/p&gt;&lt;p&gt;In this example we’ve replicated what’s happening in the HOC example but are composing it together via render props.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An excellent way to reuse or share behavior.&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Declarative&lt;ul&gt;&lt;li&gt;Easier to read/understand over HOC&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Pairs well with specialized components&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;When trying to nest multiple render props, it can get gnarly.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h3&gt;6. Custom Hooks (&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React docs&lt;/a&gt;)&lt;/h3&gt;&lt;p&gt;The latest and greatest way to compose the same behavior across components using hooks.&lt;/p&gt;&lt;p&gt;In this example we’ve replicated what’s happening in the HOC and the render prop example using a custom hook. The &lt;code class=&quot;language-text&quot;&gt;useCoordinates&lt;/code&gt; hook is a simple function that composes React’s &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; function. It keeps track of the user’s mouse location. The second item we return from our custom hook is an &lt;code class=&quot;language-text&quot;&gt;onMouseOver&lt;/code&gt; handler that gets passed to the component we want to enable with this behavior.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Usage Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The best way to share functionality with other components, its function based and makes writing components a delight!&lt;/p&gt;&lt;h4&gt;Pros&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Highly portable&lt;ul&gt;&lt;li&gt;Share functionality across components&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Works well with an function component&lt;/li&gt;&lt;li&gt;Can be mixed and match with the other styles of composition&lt;ul&gt;&lt;li&gt;Children prop&lt;/li&gt;&lt;li&gt;Specialization&lt;/li&gt;&lt;li&gt;Prop-defined&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Cons&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;The ”&lt;a href=&quot;https://reactjs.org/docs/hooks-overview.html#rules-of-hooks&quot;&gt;Rules of Hooks&lt;/a&gt;” have to be respected&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;/div&gt;&lt;h2&gt;In summary…&lt;/h2&gt;&lt;p&gt;Adding composition to your React apps will greatly enhance your components flexibility and reusability. When building, my suggestion is to mix and match composition styles to best suite your needs. I tend to gravitate towards using the children prop, specialized components, and custom hooks. I find this combo to be concise. Its all function based, there’s no odd syntax. Do you have a favorite combination?&lt;/p&gt;&lt;p&gt;I hope you enjoyed this article - thanks for reading!&lt;/p&gt;&lt;h3&gt;Additional examples&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://codepen.io/sethdavis512/pen/rNORLON&quot;&gt;React.Children() API Example&lt;/a&gt; (&lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactchildren&quot;&gt;React docs&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://codepen.io/sethdavis512/pen/GLvZBV&quot;&gt;Component Carousel&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Additional links&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://mxstbr.blog/2017/02/react-children-deepdive/&quot;&gt;A deep dive into children in React&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://kentcdodds.com/blog/when-to-not-use-render-props&quot;&gt;When to NOT use Render Props&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BcVAq3YFiuc&amp;amp;feature=youtu.be&quot;&gt;[VIDEO] Never Write Another HOC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1jWS7cCuUXw&quot;&gt;[VIDEO] Fun with Hooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Howdy y'all!]]></title><description><![CDATA[Hello 👋🏻 Welcome to Tech with Seth! Thanks for stopping by - my name is Seth Davis. I'm a Web Developer from Austin, Texas. I graduated…]]></description><link>https://www.techwithseth.com/intro-post/</link><guid isPermaLink="false">https://www.techwithseth.com/intro-post/</guid><pubDate>Mon, 07 Oct 2019 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello 👋🏻 Welcome to Tech with Seth!&lt;/p&gt;&lt;p&gt;Thanks for stopping by - my name is Seth Davis. I’m a Web Developer from Austin, Texas. I graduated from Texas State University with a Bachelors in Communication Design. For about 4 years, I worked as a Graphic Designer creating all sorts of things from Flash banner ads to e-commerce content. Slowly over time I picked up coding projects and eventually made the switch to Web Development. Now, I’m a UX Developer at &lt;a href=&quot;https://www.indeed.com/hire&quot;&gt;Indeed.com&lt;/a&gt; where I build features to help employers post better jobs.&lt;/p&gt;&lt;p&gt;Outside of work, I’m a husband and a father. I really enjoy reading and talking about electric vehicles. Occassionally you’ll find me swimming in the greenbelt, playing soccer, exploring space (No Man’s Sky) or riding my bike.&lt;/p&gt;&lt;p&gt;My plans for Tech with Seth are still in the works. For now, I plan on writing some posts and seeing where this whole blog thing takes me.&lt;/p&gt;&lt;p&gt;That’s it for now. See ya!&lt;/p&gt;</content:encoded></item></channel></rss>